import requests
from bs4 import BeautifulSoup
from UrlFunction import get_url
import asyncio
import telebot
from telebot import types
from save_img import save_function_main
from langdetect import detect


bot = telebot.TeleBot('7183441722:AAESpFiG34LtKoSNezRf3vM78pbFapYBuX0')
images = []
save_helper = False
check_number = False


@bot.message_handler(commands=['go'])
def start(message):
    full_name = f'–ü—Ä–∏–≤–µ—Ç, <u>{message.from_user.first_name} {message.from_user.last_name}</u>, —è –±–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ —Å –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç–æ–π, –≤—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç. –ü–æ–º–æ—â—å /help'
    bot.send_message(message.chat.id, full_name, parse_mode='html')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttonA = types.KeyboardButton('–ê–ª–≥–µ–±—Ä–∞')
    buttonB = types.KeyboardButton('–†—É—Å—Å–∫–∏–π')
    buttonC = types.KeyboardButton('–ê–Ω–≥–ª–∏—Å–∫–∏–π')
    buttonD = types.KeyboardButton('–ë–∏–æ–ª–æ–≥–∏—è')
    buttonE = types.KeyboardButton('–•–∏–º–∏—è')
    buttonF = types.KeyboardButton('–ì–µ–æ–º–µ—Ç—Ä–∏—è')
    buttonG = types.KeyboardButton('–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞')
    markup.row(buttonA, buttonB, buttonC, buttonD, buttonE, buttonF, buttonG)
    bot.send_message(message.chat.id, 'üëá', reply_markup=markup)

@bot.message_handler(commands=['help'])
def start(message):
    full_name = f'–ü—Ä–∏–≤–µ—Ç, <u>{message.from_user.first_name}</u>, —è –±–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ —Å –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç–æ–π, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?'
    bot.send_message(message.chat.id, full_name, parse_mode='html')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttonA = types.KeyboardButton('–ü—Ä–æ–±–ª–µ–º—ã —Å –≤–≤–æ–¥–æ–º –¥–∞–Ω–Ω—ã—Ö?')
    buttonB = types.KeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.')
    buttonC = types.KeyboardButton('–ö–∞–∫ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ?')
    markup.row(buttonA, buttonB, buttonC)
    bot.send_message(message.chat.id, 'üò¢', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ–±–ª–µ–º—ã —Å –≤–≤–æ–¥–æ–º –¥–∞–Ω–Ω—ã—Ö?')
def problem_input(message):
    bot.send_message(message.chat.id, '–í–æ—Ç —Ç–∞–∫–æ–π –≤–≤–æ–¥ –≤ –æ–±—ã—á–Ω—ã—Ö –ø—Ä–µ–¥–º–º–µ—Ç–∞—Ö(–ê–ª–≥–µ–±—Ä–∞, –ê–Ω–≥–ª–∏–π—Å–∫–∏–π, –†—É—Å—Å–∫–∏–π)')
    bot.send_photo(message.chat.id, photo=open('Problem_input_photo.png', 'rb'))
    bot.send_message(message.chat.id, '–ê –≤–æ—Ç —Ç–∞–∫–æ–π –≤–≤–æ–¥ –≤ —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–µ–¥–º–º–µ—Ç–∞—Ö(–ì–µ–æ–º–µ—Ç—Ä–∏—è, –•–∏–º–∏—è)')
    bot.send_photo(message.chat.id, photo=open('Problem_input_photo_2.png', 'rb'))

@bot.message_handler(func=lambda message: message.text == '–ö–∞–∫ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ?')
def problem_input(message):
    bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —ç—Ç–æ –µ—â–µ –Ω–µ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ /go –∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ(')

@bot.message_handler(func=lambda message: message.text == '–ù–∞–ø–∏—Å–∞—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.')
def problem_input(message):
    bot.send_message(message.chat.id, 'https://t.me/vessentness')
    bot.send_message(message.chat.id, 'https://t.me/dmitriy9461')


@bot.message_handler(func=lambda message: message.text == '–ê–ª–≥–µ–±—Ä–∞')
def algebra(message):
    global subject_help
    subject_help = 1
    bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, –∞–ª–≥–µ–±—Ä–∞. –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–≥–æ –∫–ª–∞—Å—Å–∞. –ü–æ–º–æ—â—å /help')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttonA = types.KeyboardButton('7 –∫–ª–∞—Å—Å')
    buttonB = types.KeyboardButton('8 –∫–ª–∞—Å—Å')
    buttonC = types.KeyboardButton('9 –∫–ª–∞—Å—Å')
    markup.row(buttonA, buttonB, buttonC)
    bot.send_message(message.chat.id, 'üëá', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '–†—É—Å—Å–∫–∏–π')
def russkii(message):
    global subject_help
    subject_help = 2
    bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, —Ä—É—Å—Å–∫–∏–π. –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–≥–æ –∫–ª–∞—Å—Å–∞. –ü–æ–º–æ—â—å /help')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttonA = types.KeyboardButton('7 –∫–ª–∞—Å—Å')
    buttonB = types.KeyboardButton('8 –∫–ª–∞—Å—Å')
    buttonC = types.KeyboardButton('9 –∫–ª–∞—Å—Å')
    markup.row(buttonA, buttonB, buttonC)
    bot.send_message(message.chat.id, 'üëá', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '–ê–Ω–≥–ª–∏—Å–∫–∏–π')
def english(message):
    global subject_help
    subject_help = 3
    bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, –∞–Ω–≥–ª–∏—Å–∫–∏–π. –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–≥–æ –∫–ª–∞—Å—Å–∞. –ü–æ–º–æ—â—å /help')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttonA = types.KeyboardButton('7 –∫–ª–∞—Å—Å')
    buttonB = types.KeyboardButton('8 –∫–ª–∞—Å—Å')
    buttonC = types.KeyboardButton('9 –∫–ª–∞—Å—Å')
    markup.row(buttonA, buttonB, buttonC)
    bot.send_message(message.chat.id, 'üëá', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '–ë–∏–æ–ª–æ–≥–∏—è')
def biology(message):
    global subject_help
    subject_help = 4
    bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, –±–∏–æ–ª–æ–≥–∏—è. –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–≥–æ –∫–ª–∞—Å—Å–∞. –ü–æ–º–æ—â—å /help')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttonA = types.KeyboardButton('7 –∫–ª–∞—Å—Å')
    buttonB = types.KeyboardButton('8 –∫–ª–∞—Å—Å')
    buttonC = types.KeyboardButton('9 –∫–ª–∞—Å—Å')
    markup.row(buttonA, buttonB, buttonC)
    bot.send_message(message.chat.id, 'üëá', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '–•–∏–º–∏—è')
def chemistri(message):
    global subject_help
    subject_help = 5
    bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, —Ö–∏–º–∏—è. –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–≥–æ –∫–ª–∞—Å—Å–∞. –ü–æ–º–æ—â—å /help')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttonA = types.KeyboardButton('7 –∫–ª–∞—Å—Å')
    buttonB = types.KeyboardButton('8 –∫–ª–∞—Å—Å')
    buttonC = types.KeyboardButton('9 –∫–ª–∞—Å—Å')
    markup.row(buttonA, buttonB, buttonC)
    bot.send_message(message.chat.id, 'üëá', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '–ì–µ–æ–º–µ—Ç—Ä–∏—è')
def geometry(message):
    global subject_help
    subject_help = 6
    bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, –≥–µ–æ–º–µ—Ç—Ä–∏—è. –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–≥–æ –∫–ª–∞—Å—Å–∞. –ü–æ–º–æ—â—å /help')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttonA = types.KeyboardButton('7 –∫–ª–∞—Å—Å')
    buttonB = types.KeyboardButton('8 –∫–ª–∞—Å—Å')
    buttonC = types.KeyboardButton('9 –∫–ª–∞—Å—Å')
    markup.row(buttonA, buttonB, buttonC)
    bot.send_message(message.chat.id, 'üëá', reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞')
def literatura(message):
    global subject_help
    subject_help = 7
    bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞. –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–≥–æ –∫–ª–∞—Å—Å–∞. –ü–æ–º–æ—â—å /help')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttonA = types.KeyboardButton('7 –∫–ª–∞—Å—Å')
    buttonB = types.KeyboardButton('8 –∫–ª–∞—Å—Å')
    buttonC = types.KeyboardButton('9 –∫–ª–∞—Å—Å')
    markup.row(buttonA, buttonB, buttonC)
    bot.send_message(message.chat.id, 'üëá', reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == '9 –∫–ª–∞—Å—Å')
def data(message):
    global number_of_class
    number_of_class = '9'
    if subject_help != 5 and subject_help != 6 and subject_help != 7:
        bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, 9 –∫–ª–∞—Å—Å. –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è')
    elif subject_help == 5:
        bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, 9 –∫–ª–∞—Å—Å. –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, –Ω–æ–º–µ—Ä –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –∏ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ(–≤–æ–ø—Ä–æ—Å—ã, –ø–æ–¥—É–º–∞–π –æ—Ç–≤–µ—Ç—å –≤—ã–ø–æ–ª–Ω–∏, —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã). –ü–æ–º–æ—â—å /help')
    elif subject_help == 6:
        bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, 9 –∫–ª–∞—Å—Å. –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –∏ –Ω–æ–º–µ—Ä –≥–ª–∞–≤—ã')
    elif subject_help == 7:
        bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, 9 –∫–ª–∞—Å—Å. –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –∏ –Ω–æ–º–µ—Ä —á–∞—Å—Ç–∏ —É—á–µ–±–Ω–∏–∫–∞.')


@bot.message_handler(func=lambda message: message.text == '7 –∫–ª–∞—Å—Å')
def data(message):
    global number_of_class
    number_of_class = '7'
    print(subject_help)
    if subject_help != 5 and subject_help != 6 and subject_help != 7:
        bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, 7 –∫–ª–∞—Å—Å. –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è')
    if subject_help == 5:
        bot.send_message(message.chat.id,
                         '–•–∏–º–∏–∏ 7 –∫–ª–∞—Å—Å–∞ –Ω–µ—Ç((. –ü–æ–º–æ—â—å /help')
    if subject_help == 6:
        bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, 7 –∫–ª–∞—Å—Å. –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –∏ –Ω–æ–º–µ—Ä –≥–ª–∞–≤—ã')
    if subject_help == 7:
        bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, 9 –∫–ª–∞—Å—Å. –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –∏ –Ω–æ–º–µ—Ä —á–∞—Å—Ç–∏ —É—á–µ–±–Ω–∏–∫–∞.')

@bot.message_handler(func=lambda message: message.text == '8 –∫–ª–∞—Å—Å')
def data(message):
    global number_of_class
    number_of_class = '8'
    if subject_help != 5 and subject_help != 6 and subject_help != 7:
        bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, 8 –∫–ª–∞—Å—Å. –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è')
    if subject_help == 5:
        bot.send_message(message.chat.id,
                         '–û—Ç–ª–∏—á–Ω–æ, 8 –∫–ª–∞—Å—Å. –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞. –ü–æ–º–æ—â—å /help')
    if subject_help == 6:
        bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, 8 –∫–ª–∞—Å—Å. –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –∏ –Ω–æ–º–µ—Ä –≥–ª–∞–≤—ã. –ü–æ–º–æ—â—å /help')
    if subject_help == 7:
        bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, 9 –∫–ª–∞—Å—Å. –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –∏ –Ω–æ–º–µ—Ä —á–∞—Å—Ç–∏ —É—á–µ–±–Ω–∏–∫–∞.')



@bot.message_handler(func=lambda message: '—Ç–µ—Å—Ç–æ–≤—ã–µ' in message.text or '–≤–æ–ø—Ä–æ—Å—ã' in message.text or '–ø–æ–¥—É–º–∞–π' in message.text or ('1' in message.text or '2' in message.text or '3' in message.text or
                     '4' in message.text or '5' in message.text or '6' in message.text or '7' in message.text or '8' in message.text or '9' in message.text or '0' in message.text) and subject_help and number_of_class)
def echo_message(message):
    print(True)
    global images
    global subject_help
    global number_of_class
    if subject_help == 1:
        user_response = message.text
        predmet = 'algebra'
        main_url = asyncio.run(get_url(predmet, user_response, number_of_class))
        page = requests.get(main_url)
        soup = BeautifulSoup(page.content, 'html.parser')

        image_tags = soup.find_all('img', src=True)
        much = 0
        images = []
        for tag in image_tags:
            if '/attachments/images/tasks/' in tag['src']:
                much += 1
                print('–ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', f"https:{tag['src']}")
                images.append(f"https:{tag['src']}")
        if images:
            for i in images:
                print(i)
                bot.send_photo(message.chat.id, photo=i)
        else:
            bot.send_message(message.chat.id, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ–Ω–æ –ø–ª–∞—Ç–Ω–æ–µ( –ü–æ–º–æ—â—å /help –∏–ª–∏ –ø–æ–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ /go')
        subject_help = 0

    if subject_help == 2:
        user_response = message.text
        predmet = 'russkii_yazik'
        main_url = asyncio.run(get_url(predmet, user_response, number_of_class))
        page = requests.get(main_url)
        soup = BeautifulSoup(page.content, 'html.parser')

        image_tags = soup.find_all('img', src=True)
        much = 0
        images = []
        for tag in image_tags:
            if '/attachments/images/tasks/' in tag['src']:
                much += 1
                print('–ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', f"https:{tag['src']}")
                images.append(f"https:{tag['src']}")
        if images:
            for i in images:
                print(i)
                bot.send_photo(message.chat.id, photo=i)
        else:
            bot.send_message(message.chat.id, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ–Ω–æ –ø–ª–∞—Ç–Ω–æ–µ( –ü–æ–º–æ—â—å /help –∏–ª–∏ –ø–æ–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ /go')
        subject_help = 0

    if subject_help == 3:
        user_response = message.text
        predmet = 'english'
        main_url = asyncio.run(get_url(predmet, user_response, number_of_class))
        page = requests.get(main_url)
        soup = BeautifulSoup(page.content, 'html.parser')

        image_tags = soup.find_all('img', src=True)
        much = 0
        images = []
        for tag in image_tags:
            if '/attachments/images/tasks/' in tag['src']:
                much += 1
                print('–ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', f"https:{tag['src']}")
                images.append(f"https:{tag['src']}")
        if images:
            for i in images:
                print(i)
                bot.send_photo(message.chat.id, photo=i)
        else:
            bot.send_message(message.chat.id, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ–Ω–æ –ø–ª–∞—Ç–Ω–æ–µ( –ü–æ–º–æ—â—å /help –∏–ª–∏ –ø–æ–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ /go')
        subject_help = 0

    if subject_help == 4:
        user_response = message.text
        predmet = 'biologiya'
        main_url = asyncio.run(get_url(predmet, user_response, number_of_class))
        page = requests.get(main_url)
        soup = BeautifulSoup(page.content, 'html.parser')

        image_tags = soup.find_all('img', src=True)
        much = 0
        images = []
        for tag in image_tags:
            if '/attachments/images/tasks/' in tag['src']:
                much += 1
                print('–ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', f"https:{tag['src']}")
                images.append(f"https:{tag['src']}")
        if images:
            for i in images:
                print(i)
                bot.send_photo(message.chat.id, photo=i)
        else:
            bot.send_message(message.chat.id, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ–Ω–æ –ø–ª–∞—Ç–Ω–æ–µ( –ü–æ–º–æ—â—å /help –∏–ª–∏ –ø–æ–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ /go')
        subject_help = 0

    if subject_help == 5:
        user_response = message.text.split()
        print(user_response)
        predmet = 'himiya'
        if number_of_class == '9':
            paragraph = user_response[1]
            type = user_response[2]
            main_url = asyncio.run(get_url(predmet, user_response[0], number_of_class, paragraph, type))
            page = requests.get(main_url)
            soup = BeautifulSoup(page.content, 'html.parser')

            image_tags = soup.find_all('img', src=True)
            much = 0
            images = []
            for tag in image_tags:
                if '/attachments/images/tasks/' in tag['src']:
                    much += 1
                    print('–ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', f"https:{tag['src']}")
                    images.append(f"https:{tag['src']}")
            if images:
                for i in images:
                    print(i)
                    bot.send_photo(message.chat.id, photo=i)
            else:
                bot.send_message(message.chat.id,
                                 '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ–Ω–æ –ø–ª–∞—Ç–Ω–æ–µ( –ü–æ–º–æ—â—å /help –∏–ª–∏ –ø–æ–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ /go')

            subject_help = 0
        else:
            paragraph = 1
            type = 1
            main_url = asyncio.run(get_url(predmet, user_response[0], number_of_class, paragraph, type))
            page = requests.get(main_url)
            soup = BeautifulSoup(page.content, 'html.parser')

            image_tags = soup.find_all('img', src=True)
            much = 0
            images = []
            for tag in image_tags:
                if '/attachments/images/tasks/' in tag['src']:
                    much += 1
                    print('–ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', f"https:{tag['src']}")
                    images.append(f"https:{tag['src']}")
            if images:
                for i in images:
                    print(i)
                    bot.send_photo(message.chat.id, photo=i)
            else:
                bot.send_message(message.chat.id, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ–Ω–æ –ø–ª–∞—Ç–Ω–æ–µ( –ü–æ–º–æ—â—å /help –∏–ª–∏ –ø–æ–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ /go')

            subject_help = 0

    if subject_help == 6:
        user_response = message.text.split()
        predmet = 'geometria'
        if len(user_response) == 2:
            chapter = user_response[1]
        else:
            chapter = 1
        bal = 1
        bal2 = 2
        main_url = asyncio.run(get_url(predmet, user_response[0], number_of_class, bal, bal2, chapter))
        page = requests.get(main_url)
        soup = BeautifulSoup(page.content, 'html.parser')

        image_tags = soup.find_all('img', src=True)
        much = 0
        images = []
        for tag in image_tags:
            if '/attachments/images/tasks/' in tag['src']:
                much += 1
                print('–ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', f"https:{tag['src']}")
                images.append(f"https:{tag['src']}")
        if images:
            for i in images:
                print(i)
                bot.send_photo(message.chat.id, photo=i)
        else:
            bot.send_message(message.chat.id, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ–Ω–æ –ø–ª–∞—Ç–Ω–æ–µ( –ü–æ–º–æ—â—å /help –∏–ª–∏ –ø–æ–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ /go')
        subject_help = 0

    if subject_help == 7:
        user_response = message.text.split()
        predmet = 'literatura'
        chapter = user_response[1]
        bal = 1
        bal2 = 2
        main_url = asyncio.run(get_url(predmet, user_response[0], number_of_class, bal, bal2, chapter))
        page = requests.get(main_url)
        soup = BeautifulSoup(page.content, 'html.parser')
        image_tags = soup.find_all('img', src=True)
        much = 0
        images = []
        for tag in image_tags:
            if '/attachments/images/tasks/' in tag['src']:
                much += 1
                print('–ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', f"https:{tag['src']}")
                images.append(f"https:{tag['src']}")
        if images:
            for i in images:
                print(i)
                bot.send_photo(message.chat.id, photo=i)
        else:
            bot.send_message(message.chat.id, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ–Ω–æ –ø–ª–∞—Ç–Ω–æ–µ( –ü–æ–º–æ—â—å /help –∏–ª–∏ –ø–æ–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ /go')
        subject_help = 0

    bot.send_message(message.chat.id, '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ?')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttonA = types.KeyboardButton('–î–∞')
    buttonB = types.KeyboardButton('–ù–µ—Ç')
    markup.row(buttonA, buttonB)
    bot.send_message(message.chat.id, 'üëá', reply_markup=markup)
    message.text = ''

@bot.message_handler(func=lambda message: message.text == '–î–∞')
def save(message):
    global save_helper
    save_helper = True
    bot.send_message(message.chat.id, '–ö–∞–∫–æ–µ —Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å?')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    score = 0
    change1 = {
        '1': '–ø–µ—Ä–≤–æ–µ',
        '2': '–≤—Ç–æ—Ä–æ–µ',
        '3': '—Ç—Ä–µ—Ç—å–µ',
        '4': '—á–µ—Ç–≤–µ—Ä—Ç–æ–µ',
        '5': '–ø—è—Ç–æ–µ',
        '6': '—à–µ—Å—Ç–æ–µ',
        '7': '—Å–µ–¥—å–º–æ–µ',
        '8': '–≤–æ—Å—å–º–æ–µ',
        '9': '–¥–µ–≤—è—Ç–æ–µ',
        '10': '–¥–µ—Å—è—Ç–æ–µ',
        '11': '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç–æ–µ',
        '12': '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç–æ–µ',
        '13': '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç–æ–µ',
        '14': '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç–æ–µ',
        '15': '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–æ–µ',
        '16': '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–æ–µ',
        '17': '—Å–µ–º–Ω–∞–¥—Ü–∞—Ç–æ–µ',
        '18': '–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç–æ–µ',
        '19': '–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç–æ–µ',
        '20': '–¥–≤–∞–¥—Ü–∞—Ç–æ–µ',
        '21': '–¥–≤–∞–¥—Ü–∞—Ç—å –ø–µ—Ä–≤–æ–µ',
        '22': '–¥–≤–∞–¥—Ü–∞—Ç—å –≤—Ç–æ—Ä–æ–µ',
        '23': '–¥–≤–∞–¥—Ü–∞—Ç—å —Ç—Ä–µ—Ç—å–µ',
        '24': '–¥–≤–∞–¥—Ü–∞—Ç—å —á–µ—Ç–≤–µ—Ä—Ç–æ–µ',
        '25': '–¥–≤–∞–¥—Ü–∞—Ç—å –ø—è—Ç–æ–µ'
    }
    for i in images:
        score += 1
        for number, string in change1.items():
            if score == int(number):
                name = types.KeyboardButton(f"{string} —Ñ–æ—Ç–æ")
        markup.row(name)
    bot.send_message(message.chat.id, 'üëá', reply_markup=markup)



@bot.message_handler(func=lambda message: message.text == '–ù–µ—Ç')
def save(message):
    global images
    global save_helper
    bot.send_message(message.chat.id, '–û–∫–µ–π. /go')
    images = []
    message.text = ''
    save_helper = False

@bot.message_handler(func=lambda message: save_helper == True)
def go_save_function(message):
    global images
    global save_helper
    change1 = {
        '1': '–ø–µ—Ä–≤–æ–µ',
        '2': '–≤—Ç–æ—Ä–æ–µ',
        '3': '—Ç—Ä–µ—Ç—å–µ',
        '4': '—á–µ—Ç–≤–µ—Ä—Ç–æ–µ',
        '5': '–ø—è—Ç–æ–µ',
        '6': '—à–µ—Å—Ç–æ–µ',
        '7': '—Å–µ–¥—å–º–æ–µ',
        '8': '–≤–æ—Å—å–º–æ–µ',
        '9': '–¥–µ–≤—è—Ç–æ–µ',
        '10': '–¥–µ—Å—è—Ç–æ–µ',
        '11': '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç–æ–µ',
        '12': '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç–æ–µ',
        '13': '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç–æ–µ',
        '14': '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç–æ–µ',
        '15': '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–æ–µ',
        '16': '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–æ–µ',
        '17': '—Å–µ–º–Ω–∞–¥—Ü–∞—Ç–æ–µ',
        '18': '–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç–æ–µ',
        '19': '–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç–æ–µ',
        '20': '–¥–≤–∞–¥—Ü–∞—Ç–æ–µ',
        '21': '–¥–≤–∞–¥—Ü–∞—Ç—å –ø–µ—Ä–≤–æ–µ',
        '22': '–¥–≤–∞–¥—Ü–∞—Ç—å –≤—Ç–æ—Ä–æ–µ',
        '23': '–¥–≤–∞–¥—Ü–∞—Ç—å —Ç—Ä–µ—Ç—å–µ',
        '24': '–¥–≤–∞–¥—Ü–∞—Ç—å —á–µ—Ç–≤–µ—Ä—Ç–æ–µ',
        '25': '–¥–≤–∞–¥—Ü–∞—Ç—å –ø—è—Ç–æ–µ'
    }
    for number, string in change1.items():
        if message.text.split()[0] == string:
            res = number
            print(message.text)
    check = asyncio.run(save_function_main(images, res))
    if check == True:
        bot.send_message(message.chat.id, '–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!')
        bot.send_message(message.chat.id, '‚úîÔ∏è ')
    images = []
    message.text = ''
bot.polling(none_stop=True)

